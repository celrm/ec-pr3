   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  21              	.Ltext0:
  22              		.file 1 "../main.c"
 2760              		.align	2
 2763              	RL:
 2764 0000 00000000 		.word	0
 2765 0004 05000000 		.word	5
 2766 0008 00000000 		.word	0
 2767 000c 00000000 		.word	0
 2768              		.text
 2769              		.align	2
 2770              		.global	timer_ISR
 2772              	timer_ISR:
 2773              	.LFB0:
   1:../main.c     **** 
   2:../main.c     **** #include <stdio.h>
   3:../main.c     **** #include "44b.h"
   4:../main.c     **** #include "button.h"
   5:../main.c     **** #include "leds.h"
   6:../main.c     **** #include "utils.h"
   7:../main.c     **** #include "D8Led.h"
   8:../main.c     **** #include "intcontroller.h"
   9:../main.c     **** #include "timer.h"
  10:../main.c     **** #include "gpio.h"
  11:../main.c     **** #include "keyboard.h"
  12:../main.c     **** 
  13:../main.c     **** struct RLstat {
  14:../main.c     **** 	int moving;
  15:../main.c     **** 	int speed;
  16:../main.c     **** 	int direction;
  17:../main.c     **** 	int position;
  18:../main.c     **** };
  19:../main.c     **** 
  20:../main.c     **** static struct RLstat RL = {
  21:../main.c     **** 	.moving = 0,
  22:../main.c     **** 	.speed = 5,
  23:../main.c     **** 	.direction = 0,
  24:../main.c     **** 	.position = 0,
  25:../main.c     **** };
  26:../main.c     **** 
  27:../main.c     **** void timer_ISR(void) __attribute__ ((interrupt ("IRQ")));
  28:../main.c     **** void button_ISR(void) __attribute__ ((interrupt ("IRQ")));
  29:../main.c     **** void keyboard_ISR(void) __attribute__ ((interrupt ("IRQ")));
  30:../main.c     **** 
  31:../main.c     **** void timer_ISR(void)
  32:../main.c     **** {
 2774              		.loc 1 32 0
 2775              		.cfi_startproc
 2776              		@ Interrupt Service Routine.
 2777              		@ args = 0, pretend = 0, frame = 0
 2778              		@ frame_needed = 1, uses_anonymous_args = 0
 2779 0000 04C02DE5 		str	ip, [sp, #-4]!
 2780 0004 0DC0A0E1 		mov	ip, sp
 2781              	.LCFI0:
 2782              		.cfi_def_cfa_register 12
 2783 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2784 000c 04B04CE2 		sub	fp, ip, #4
 2785              		.cfi_offset 14, -8
 2786              		.cfi_offset 13, -12
 2787              		.cfi_offset 11, -16
 2788              		.cfi_offset 3, -20
 2789              		.cfi_offset 2, -24
 2790              		.cfi_offset 1, -28
 2791              		.cfi_offset 0, -32
 2792              	.LCFI1:
 2793              		.cfi_def_cfa 11, 4
  33:../main.c     **** 	if (RL.direction)
 2794              		.loc 1 33 0
 2795 0010 A4309FE5 		ldr	r3, .L4
 2796 0014 083093E5 		ldr	r3, [r3, #8]
 2797 0018 000053E3 		cmp	r3, #0
 2798 001c 0E00000A 		beq	.L2
  34:../main.c     **** 		RL.position = (RL.position + 1) % 6;
 2799              		.loc 1 34 0
 2800 0020 94309FE5 		ldr	r3, .L4
 2801 0024 0C3093E5 		ldr	r3, [r3, #12]
 2802 0028 011083E2 		add	r1, r3, #1
 2803 002c 8C309FE5 		ldr	r3, .L4+4
 2804 0030 9301C2E0 		smull	r0, r2, r3, r1
 2805 0034 C13FA0E1 		mov	r3, r1, asr #31
 2806 0038 022063E0 		rsb	r2, r3, r2
 2807 003c 0230A0E1 		mov	r3, r2
 2808 0040 8330A0E1 		mov	r3, r3, asl #1
 2809 0044 023083E0 		add	r3, r3, r2
 2810 0048 8330A0E1 		mov	r3, r3, asl #1
 2811 004c 012063E0 		rsb	r2, r3, r1
 2812 0050 64309FE5 		ldr	r3, .L4
 2813 0054 0C2083E5 		str	r2, [r3, #12]
 2814 0058 0D0000EA 		b	.L3
 2815              	.L2:
  35:../main.c     **** 	else
  36:../main.c     **** 		RL.position = (RL.position + 5) % 6;
 2816              		.loc 1 36 0
 2817 005c 58309FE5 		ldr	r3, .L4
 2818 0060 0C3093E5 		ldr	r3, [r3, #12]
 2819 0064 051083E2 		add	r1, r3, #5
 2820 0068 50309FE5 		ldr	r3, .L4+4
 2821 006c 9301C2E0 		smull	r0, r2, r3, r1
 2822 0070 C13FA0E1 		mov	r3, r1, asr #31
 2823 0074 022063E0 		rsb	r2, r3, r2
 2824 0078 0230A0E1 		mov	r3, r2
 2825 007c 8330A0E1 		mov	r3, r3, asl #1
 2826 0080 023083E0 		add	r3, r3, r2
 2827 0084 8330A0E1 		mov	r3, r3, asl #1
 2828 0088 012063E0 		rsb	r2, r3, r1
 2829 008c 28309FE5 		ldr	r3, .L4
 2830 0090 0C2083E5 		str	r2, [r3, #12]
 2831              	.L3:
  37:../main.c     **** 
  38:../main.c     **** 	D8Led_segment(RL.position);
 2832              		.loc 1 38 0
 2833 0094 20309FE5 		ldr	r3, .L4
 2834 0098 0C3093E5 		ldr	r3, [r3, #12]
 2835 009c 0300A0E1 		mov	r0, r3
 2836 00a0 FEFFFFEB 		bl	D8Led_segment
  39:../main.c     **** 
  40:../main.c     **** 	ic_cleanflag(INT_TIMER0);
 2837              		.loc 1 40 0
 2838 00a4 0D00A0E3 		mov	r0, #13
 2839 00a8 FEFFFFEB 		bl	ic_cleanflag
  41:../main.c     **** }
 2840              		.loc 1 41 0
 2841 00ac 1CD04BE2 		sub	sp, fp, #28
 2842 00b0 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2843 00b4 04C09DE4 		ldmfd	sp!, {ip}
 2844 00b8 04F05EE2 		subs	pc, lr, #4
 2845              	.L5:
 2846              		.align	2
 2847              	.L4:
 2848 00bc 00000000 		.word	RL
 2849 00c0 ABAAAA2A 		.word	715827883
 2850              		.cfi_endproc
 2851              	.LFE0:
 2853              		.bss
 2854              		.align	2
 2855              	cont:
 2856 0000 00000000 		.space	4
 2857              		.text
 2858              		.align	2
 2859              		.global	button_ISR
 2861              	button_ISR:
 2862              	.LFB1:
  42:../main.c     **** 
  43:../main.c     **** 
  44:../main.c     **** static int cont = 0;
  45:../main.c     **** 
  46:../main.c     **** void button_ISR(void)
  47:../main.c     **** {
 2863              		.loc 1 47 0
 2864              		.cfi_startproc
 2865              		@ Interrupt Service Routine.
 2866              		@ args = 0, pretend = 0, frame = 8
 2867              		@ frame_needed = 1, uses_anonymous_args = 0
 2868 00c4 04C02DE5 		str	ip, [sp, #-4]!
 2869 00c8 0DC0A0E1 		mov	ip, sp
 2870              	.LCFI2:
 2871              		.cfi_def_cfa_register 12
 2872 00cc 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2873 00d0 04B04CE2 		sub	fp, ip, #4
 2874              		.cfi_offset 14, -8
 2875              		.cfi_offset 13, -12
 2876              		.cfi_offset 11, -16
 2877              		.cfi_offset 3, -20
 2878              		.cfi_offset 2, -24
 2879              		.cfi_offset 1, -28
 2880              		.cfi_offset 0, -32
 2881              	.LCFI3:
 2882              		.cfi_def_cfa 11, 4
 2883 00d4 08D04DE2 		sub	sp, sp, #8
  48:../main.c     **** 	unsigned int whicheint = rEXTINTPND;
 2884              		.loc 1 48 0
 2885 00d8 E0309FE5 		ldr	r3, .L12
 2886 00dc 003093E5 		ldr	r3, [r3, #0]
 2887 00e0 20300BE5 		str	r3, [fp, #-32]
  49:../main.c     **** 	unsigned int buttons = (whicheint >> 2) & 0x3;
 2888              		.loc 1 49 0
 2889 00e4 20301BE5 		ldr	r3, [fp, #-32]
 2890 00e8 2331A0E1 		mov	r3, r3, lsr #2
 2891 00ec 033003E2 		and	r3, r3, #3
 2892 00f0 24300BE5 		str	r3, [fp, #-36]
  50:../main.c     **** 
  51:../main.c     **** 	if (buttons & BUT1) {
 2893              		.loc 1 51 0
 2894 00f4 24301BE5 		ldr	r3, [fp, #-36]
 2895 00f8 013003E2 		and	r3, r3, #1
 2896 00fc FF3003E2 		and	r3, r3, #255
 2897 0100 000053E3 		cmp	r3, #0
 2898 0104 0600000A 		beq	.L7
  52:../main.c     **** 		led1_off();
 2899              		.loc 1 52 0
 2900 0108 FEFFFFEB 		bl	led1_off
  53:../main.c     **** 		led2_off();
 2901              		.loc 1 53 0
 2902 010c FEFFFFEB 		bl	led2_off
  54:../main.c     **** 		RL.direction = ~RL.direction;
 2903              		.loc 1 54 0
 2904 0110 AC309FE5 		ldr	r3, .L12+4
 2905 0114 083093E5 		ldr	r3, [r3, #8]
 2906 0118 0320E0E1 		mvn	r2, r3
 2907 011c A0309FE5 		ldr	r3, .L12+4
 2908 0120 082083E5 		str	r2, [r3, #8]
 2909              	.L7:
  55:../main.c     **** 	}
  56:../main.c     **** 
  57:../main.c     **** 	if (buttons & BUT2) {
 2910              		.loc 1 57 0
 2911 0124 24301BE5 		ldr	r3, [fp, #-36]
 2912 0128 023003E2 		and	r3, r3, #2
 2913 012c 000053E3 		cmp	r3, #0
 2914 0130 1A00000A 		beq	.L8
  58:../main.c     **** 		cont++;
 2915              		.loc 1 58 0
 2916 0134 8C309FE5 		ldr	r3, .L12+8
 2917 0138 003093E5 		ldr	r3, [r3, #0]
 2918 013c 012083E2 		add	r2, r3, #1
 2919 0140 80309FE5 		ldr	r3, .L12+8
 2920 0144 002083E5 		str	r2, [r3, #0]
  59:../main.c     **** 		if (cont % 2 == 0)
 2921              		.loc 1 59 0
 2922 0148 78309FE5 		ldr	r3, .L12+8
 2923 014c 003093E5 		ldr	r3, [r3, #0]
 2924 0150 013003E2 		and	r3, r3, #1
 2925 0154 000053E3 		cmp	r3, #0
 2926 0158 0100001A 		bne	.L9
  60:../main.c     **** 			led1_switch();
 2927              		.loc 1 60 0
 2928 015c FEFFFFEB 		bl	led1_switch
 2929 0160 000000EA 		b	.L10
 2930              	.L9:
  61:../main.c     **** 		else
  62:../main.c     **** 			led2_switch();
 2931              		.loc 1 62 0
 2932 0164 FEFFFFEB 		bl	led2_switch
 2933              	.L10:
  63:../main.c     **** 		RL.moving = ~RL.moving;
 2934              		.loc 1 63 0
 2935 0168 54309FE5 		ldr	r3, .L12+4
 2936 016c 003093E5 		ldr	r3, [r3, #0]
 2937 0170 0320E0E1 		mvn	r2, r3
 2938 0174 48309FE5 		ldr	r3, .L12+4
 2939 0178 002083E5 		str	r2, [r3, #0]
  64:../main.c     **** 		if(RL.moving)
 2940              		.loc 1 64 0
 2941 017c 40309FE5 		ldr	r3, .L12+4
 2942 0180 003093E5 		ldr	r3, [r3, #0]
 2943 0184 000053E3 		cmp	r3, #0
 2944 0188 0200000A 		beq	.L11
  65:../main.c     **** 			tmr_start(TIMER0);
 2945              		.loc 1 65 0
 2946 018c 0000A0E3 		mov	r0, #0
 2947 0190 FEFFFFEB 		bl	tmr_start
 2948 0194 010000EA 		b	.L8
 2949              	.L11:
  66:../main.c     **** 		else
  67:../main.c     **** 			tmr_stop(TIMER0);
 2950              		.loc 1 67 0
 2951 0198 0000A0E3 		mov	r0, #0
 2952 019c FEFFFFEB 		bl	tmr_stop
 2953              	.L8:
  68:../main.c     **** 	}
  69:../main.c     **** 
  70:../main.c     **** 	// eliminamos rebotes
  71:../main.c     **** 	Delay(2000);
 2954              		.loc 1 71 0
 2955 01a0 7D0EA0E3 		mov	r0, #2000
 2956 01a4 FEFFFFEB 		bl	Delay
  72:../main.c     **** 	// borramos el flag en extintpnd
  73:../main.c     **** 	ic_cleanflag(INT_EINT4567);
 2957              		.loc 1 73 0
 2958 01a8 1500A0E3 		mov	r0, #21
 2959 01ac FEFFFFEB 		bl	ic_cleanflag
  74:../main.c     **** }
 2960              		.loc 1 74 0
 2961 01b0 1CD04BE2 		sub	sp, fp, #28
 2962 01b4 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2963 01b8 04C09DE4 		ldmfd	sp!, {ip}
 2964 01bc 04F05EE2 		subs	pc, lr, #4
 2965              	.L13:
 2966              		.align	2
 2967              	.L12:
 2968 01c0 5400D201 		.word	30539860
 2969 01c4 00000000 		.word	RL
 2970 01c8 00000000 		.word	cont
 2971              		.cfi_endproc
 2972              	.LFE1:
 2974              		.align	2
 2975              		.global	keyboard_ISR
 2977              	keyboard_ISR:
 2978              	.LFB2:
  75:../main.c     **** 
  76:../main.c     **** void keyboard_ISR(void)
  77:../main.c     **** {
 2979              		.loc 1 77 0
 2980              		.cfi_startproc
 2981              		@ Interrupt Service Routine.
 2982              		@ args = 0, pretend = 0, frame = 8
 2983              		@ frame_needed = 1, uses_anonymous_args = 0
 2984 01cc 04C02DE5 		str	ip, [sp, #-4]!
 2985 01d0 0DC0A0E1 		mov	ip, sp
 2986              	.LCFI4:
 2987              		.cfi_def_cfa_register 12
 2988 01d4 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2989 01d8 04B04CE2 		sub	fp, ip, #4
 2990              		.cfi_offset 14, -8
 2991              		.cfi_offset 13, -12
 2992              		.cfi_offset 11, -16
 2993              		.cfi_offset 3, -20
 2994              		.cfi_offset 2, -24
 2995              		.cfi_offset 1, -28
 2996              		.cfi_offset 0, -32
 2997              	.LCFI5:
 2998              		.cfi_def_cfa 11, 4
 2999 01dc 08D04DE2 		sub	sp, sp, #8
  78:../main.c     **** 	int key;
  79:../main.c     **** 
  80:../main.c     **** 	/* Eliminar rebotes de presión */
  81:../main.c     **** 	Delay(200);
 3000              		.loc 1 81 0
 3001 01e0 C800A0E3 		mov	r0, #200
 3002 01e4 FEFFFFEB 		bl	Delay
  82:../main.c     **** 	
  83:../main.c     **** 	/* Escaneo de tecla */
  84:../main.c     **** 	key = kb_scan();
 3003              		.loc 1 84 0
 3004 01e8 FEFFFFEB 		bl	kb_scan
 3005 01ec 20000BE5 		str	r0, [fp, #-32]
  85:../main.c     **** 
  86:../main.c     **** 	if (key != -1) {
 3006              		.loc 1 86 0
 3007 01f0 20301BE5 		ldr	r3, [fp, #-32]
 3008 01f4 010073E3 		cmn	r3, #1
 3009 01f8 4400000A 		beq	.L15
  87:../main.c     **** 		/* Visualizacion en el display */
  88:../main.c     **** 		D8Led_digit(key);
 3010              		.loc 1 88 0
 3011 01fc 20001BE5 		ldr	r0, [fp, #-32]
 3012 0200 FEFFFFEB 		bl	D8Led_digit
  89:../main.c     **** 
  90:../main.c     **** 		switch (key) {
 3013              		.loc 1 90 0
 3014 0204 20301BE5 		ldr	r3, [fp, #-32]
 3015 0208 030053E3 		cmp	r3, #3
 3016 020c 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 3017 0210 370000EA 		b	.L16
 3018              	.L21:
 3019 0214 24020000 		.word	.L17
 3020 0218 58020000 		.word	.L18
 3021 021c 8C020000 		.word	.L19
 3022 0220 C0020000 		.word	.L20
 3023              	.L17:
  91:../main.c     **** 			case 0:
  92:../main.c     **** 				tmr_set_prescaler(TIMER0, 255);
 3024              		.loc 1 92 0
 3025 0224 0000A0E3 		mov	r0, #0
 3026 0228 FF10A0E3 		mov	r1, #255
 3027 022c FEFFFFEB 		bl	tmr_set_prescaler
  93:../main.c     **** 				tmr_set_divider(TIMER0, D1_8);
 3028              		.loc 1 93 0
 3029 0230 0000A0E3 		mov	r0, #0
 3030 0234 0210A0E3 		mov	r1, #2
 3031 0238 FEFFFFEB 		bl	tmr_set_divider
  94:../main.c     **** 				tmr_set_count(TIMER0, 62500, 1);
 3032              		.loc 1 94 0
 3033 023c 0000A0E3 		mov	r0, #0
 3034 0240 E8109FE5 		ldr	r1, .L24
 3035 0244 0120A0E3 		mov	r2, #1
 3036 0248 FEFFFFEB 		bl	tmr_set_count
  95:../main.c     **** 				tmr_update(TIMER0);
 3037              		.loc 1 95 0
 3038 024c 0000A0E3 		mov	r0, #0
 3039 0250 FEFFFFEB 		bl	tmr_update
  96:../main.c     **** 				break;
 3040              		.loc 1 96 0
 3041 0254 270000EA 		b	.L22
 3042              	.L18:
  97:../main.c     **** 			case 1:
  98:../main.c     **** 				tmr_set_prescaler(TIMER0, 255);
 3043              		.loc 1 98 0
 3044 0258 0000A0E3 		mov	r0, #0
 3045 025c FF10A0E3 		mov	r1, #255
 3046 0260 FEFFFFEB 		bl	tmr_set_prescaler
  99:../main.c     **** 				tmr_set_divider(TIMER0, D1_8);
 3047              		.loc 1 99 0
 3048 0264 0000A0E3 		mov	r0, #0
 3049 0268 0210A0E3 		mov	r1, #2
 3050 026c FEFFFFEB 		bl	tmr_set_divider
 100:../main.c     **** 				tmr_set_count(TIMER0, 31250, 1);
 3051              		.loc 1 100 0
 3052 0270 0000A0E3 		mov	r0, #0
 3053 0274 B8109FE5 		ldr	r1, .L24+4
 3054 0278 0120A0E3 		mov	r2, #1
 3055 027c FEFFFFEB 		bl	tmr_set_count
 101:../main.c     **** 				tmr_update(TIMER0);
 3056              		.loc 1 101 0
 3057 0280 0000A0E3 		mov	r0, #0
 3058 0284 FEFFFFEB 		bl	tmr_update
 102:../main.c     **** 				break;
 3059              		.loc 1 102 0
 3060 0288 1A0000EA 		b	.L22
 3061              	.L19:
 103:../main.c     **** 			case 2:
 104:../main.c     **** 				tmr_set_prescaler(TIMER0, 255);
 3062              		.loc 1 104 0
 3063 028c 0000A0E3 		mov	r0, #0
 3064 0290 FF10A0E3 		mov	r1, #255
 3065 0294 FEFFFFEB 		bl	tmr_set_prescaler
 105:../main.c     **** 				tmr_set_divider(TIMER0, D1_8);
 3066              		.loc 1 105 0
 3067 0298 0000A0E3 		mov	r0, #0
 3068 029c 0210A0E3 		mov	r1, #2
 3069 02a0 FEFFFFEB 		bl	tmr_set_divider
 106:../main.c     **** 				tmr_set_count(TIMER0, 15625, 1);
 3070              		.loc 1 106 0
 3071 02a4 0000A0E3 		mov	r0, #0
 3072 02a8 88109FE5 		ldr	r1, .L24+8
 3073 02ac 0120A0E3 		mov	r2, #1
 3074 02b0 FEFFFFEB 		bl	tmr_set_count
 107:../main.c     **** 				tmr_update(TIMER0);
 3075              		.loc 1 107 0
 3076 02b4 0000A0E3 		mov	r0, #0
 3077 02b8 FEFFFFEB 		bl	tmr_update
 108:../main.c     **** 				break;
 3078              		.loc 1 108 0
 3079 02bc 0D0000EA 		b	.L22
 3080              	.L20:
 109:../main.c     **** 			case 3:
 110:../main.c     **** 				tmr_set_prescaler(TIMER0, 255);
 3081              		.loc 1 110 0
 3082 02c0 0000A0E3 		mov	r0, #0
 3083 02c4 FF10A0E3 		mov	r1, #255
 3084 02c8 FEFFFFEB 		bl	tmr_set_prescaler
 111:../main.c     **** 				tmr_set_divider(TIMER0, D1_4);
 3085              		.loc 1 111 0
 3086 02cc 0000A0E3 		mov	r0, #0
 3087 02d0 0110A0E3 		mov	r1, #1
 3088 02d4 FEFFFFEB 		bl	tmr_set_divider
 112:../main.c     **** 				tmr_set_count(TIMER0, 15625, 1);
 3089              		.loc 1 112 0
 3090 02d8 0000A0E3 		mov	r0, #0
 3091 02dc 54109FE5 		ldr	r1, .L24+8
 3092 02e0 0120A0E3 		mov	r2, #1
 3093 02e4 FEFFFFEB 		bl	tmr_set_count
 113:../main.c     **** 				tmr_update(TIMER0);
 3094              		.loc 1 113 0
 3095 02e8 0000A0E3 		mov	r0, #0
 3096 02ec FEFFFFEB 		bl	tmr_update
 114:../main.c     **** 				break;
 3097              		.loc 1 114 0
 3098 02f0 000000EA 		b	.L22
 3099              	.L16:
 115:../main.c     **** 			default:
 116:../main.c     **** 				break;
 3100              		.loc 1 116 0
 3101 02f4 0000A0E1 		mov	r0, r0	@ nop
 3102              	.L22:
 117:../main.c     **** 		}
 118:../main.c     **** 		
 119:../main.c     **** 		/* Esperar a que la tecla se suelte, consultando el registro de datos */		
 120:../main.c     **** 		while (( rPDATG & (1 << 1)) != (1 << 1)) {};
 3103              		.loc 1 120 0
 3104 02f8 0000A0E1 		mov	r0, r0	@ nop
 3105              	.L23:
 3106              		.loc 1 120 0 is_stmt 0 discriminator 1
 3107 02fc 38309FE5 		ldr	r3, .L24+12
 3108 0300 003093E5 		ldr	r3, [r3, #0]
 3109 0304 023003E2 		and	r3, r3, #2
 3110 0308 000053E3 		cmp	r3, #0
 3111 030c FAFFFF0A 		beq	.L23
 3112              	.L15:
 121:../main.c     **** 	}
 122:../main.c     **** 
 123:../main.c     ****     /* Eliminar rebotes de depresión */
 124:../main.c     ****     Delay(200);
 3113              		.loc 1 124 0 is_stmt 1
 3114 0310 C800A0E3 		mov	r0, #200
 3115 0314 FEFFFFEB 		bl	Delay
 125:../main.c     ****      
 126:../main.c     ****     /* Borrar interrupciones pendientes */
 127:../main.c     ****     ic_cleanflag(INT_EINT1);
 3116              		.loc 1 127 0
 3117 0318 1800A0E3 		mov	r0, #24
 3118 031c FEFFFFEB 		bl	ic_cleanflag
 128:../main.c     **** }
 3119              		.loc 1 128 0
 3120 0320 1CD04BE2 		sub	sp, fp, #28
 3121 0324 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3122 0328 04C09DE4 		ldmfd	sp!, {ip}
 3123 032c 04F05EE2 		subs	pc, lr, #4
 3124              	.L25:
 3125              		.align	2
 3126              	.L24:
 3127 0330 24F40000 		.word	62500
 3128 0334 127A0000 		.word	31250
 3129 0338 093D0000 		.word	15625
 3130 033c 4400D201 		.word	30539844
 3131              		.cfi_endproc
 3132              	.LFE2:
 3134              		.align	2
 3135              		.global	setup
 3137              	setup:
 3138              	.LFB3:
 129:../main.c     **** 
 130:../main.c     **** int setup(void)
 131:../main.c     **** {
 3139              		.loc 1 131 0
 3140              		.cfi_startproc
 3141              		@ Function supports interworking.
 3142              		@ args = 0, pretend = 0, frame = 0
 3143              		@ frame_needed = 1, uses_anonymous_args = 0
 3144 0340 0DC0A0E1 		mov	ip, sp
 3145              	.LCFI6:
 3146              		.cfi_def_cfa_register 12
 3147 0344 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3148 0348 04B04CE2 		sub	fp, ip, #4
 3149              		.cfi_offset 14, -8
 3150              		.cfi_offset 13, -12
 3151              		.cfi_offset 11, -16
 3152              	.LCFI7:
 3153              		.cfi_def_cfa 11, 4
 132:../main.c     **** 	leds_init();
 3154              		.loc 1 132 0
 3155 034c FEFFFFEB 		bl	leds_init
 133:../main.c     **** 	D8Led_init();
 3156              		.loc 1 133 0
 3157 0350 FEFFFFEB 		bl	D8Led_init
 134:../main.c     **** 	D8Led_segment(RL.position);
 3158              		.loc 1 134 0
 3159 0354 5C319FE5 		ldr	r3, .L28
 3160 0358 0C3093E5 		ldr	r3, [r3, #12]
 3161 035c 0300A0E1 		mov	r0, r3
 3162 0360 FEFFFFEB 		bl	D8Led_segment
 135:../main.c     **** 
 136:../main.c     **** 	/* Port G: configuración para generación de interrupciones externas,
 137:../main.c     **** 	 *         botones y teclado
 138:../main.c     **** 	 **/
 139:../main.c     **** 
 140:../main.c     **** 	portG_conf(1, EINT);
 3163              		.loc 1 140 0
 3164 0364 0100A0E3 		mov	r0, #1
 3165 0368 0310A0E3 		mov	r1, #3
 3166 036c FEFFFFEB 		bl	portG_conf
 141:../main.c     **** 	portG_conf(6, EINT);
 3167              		.loc 1 141 0
 3168 0370 0600A0E3 		mov	r0, #6
 3169 0374 0310A0E3 		mov	r1, #3
 3170 0378 FEFFFFEB 		bl	portG_conf
 142:../main.c     **** 	portG_conf(7, EINT);
 3171              		.loc 1 142 0
 3172 037c 0700A0E3 		mov	r0, #7
 3173 0380 0310A0E3 		mov	r1, #3
 3174 0384 FEFFFFEB 		bl	portG_conf
 143:../main.c     **** 	portG_eint_trig(1, FALLING);
 3175              		.loc 1 143 0
 3176 0388 0100A0E3 		mov	r0, #1
 3177 038c 0210A0E3 		mov	r1, #2
 3178 0390 FEFFFFEB 		bl	portG_eint_trig
 144:../main.c     **** 	portG_eint_trig(6, FALLING);
 3179              		.loc 1 144 0
 3180 0394 0600A0E3 		mov	r0, #6
 3181 0398 0210A0E3 		mov	r1, #2
 3182 039c FEFFFFEB 		bl	portG_eint_trig
 145:../main.c     **** 	portG_eint_trig(7, FALLING);
 3183              		.loc 1 145 0
 3184 03a0 0700A0E3 		mov	r0, #7
 3185 03a4 0210A0E3 		mov	r1, #2
 3186 03a8 FEFFFFEB 		bl	portG_eint_trig
 146:../main.c     **** 	portG_conf_pup(1, ENABLE);
 3187              		.loc 1 146 0
 3188 03ac 0100A0E3 		mov	r0, #1
 3189 03b0 0110A0E3 		mov	r1, #1
 3190 03b4 FEFFFFEB 		bl	portG_conf_pup
 147:../main.c     **** 	portG_conf_pup(6, ENABLE);
 3191              		.loc 1 147 0
 3192 03b8 0600A0E3 		mov	r0, #6
 3193 03bc 0110A0E3 		mov	r1, #1
 3194 03c0 FEFFFFEB 		bl	portG_conf_pup
 148:../main.c     **** 	portG_conf_pup(7, ENABLE);
 3195              		.loc 1 148 0
 3196 03c4 0700A0E3 		mov	r0, #7
 3197 03c8 0110A0E3 		mov	r1, #1
 3198 03cc FEFFFFEB 		bl	portG_conf_pup
 149:../main.c     **** 
 150:../main.c     **** 	/********************************************************************/
 151:../main.c     **** 
 152:../main.c     **** 	/* Configuración del timer */
 153:../main.c     **** 
 154:../main.c     **** 	tmr_set_mode(TIMER0, RELOAD);
 3199              		.loc 1 154 0
 3200 03d0 0000A0E3 		mov	r0, #0
 3201 03d4 0110A0E3 		mov	r1, #1
 3202 03d8 FEFFFFEB 		bl	tmr_set_mode
 155:../main.c     **** 	tmr_set_prescaler(TIMER0, 255);
 3203              		.loc 1 155 0
 3204 03dc 0000A0E3 		mov	r0, #0
 3205 03e0 FF10A0E3 		mov	r1, #255
 3206 03e4 FEFFFFEB 		bl	tmr_set_prescaler
 156:../main.c     **** 	tmr_set_divider(TIMER0, D1_8);
 3207              		.loc 1 156 0
 3208 03e8 0000A0E3 		mov	r0, #0
 3209 03ec 0210A0E3 		mov	r1, #2
 3210 03f0 FEFFFFEB 		bl	tmr_set_divider
 157:../main.c     **** 	tmr_set_count(TIMER0, 62500, 1);
 3211              		.loc 1 157 0
 3212 03f4 0000A0E3 		mov	r0, #0
 3213 03f8 BC109FE5 		ldr	r1, .L28+4
 3214 03fc 0120A0E3 		mov	r2, #1
 3215 0400 FEFFFFEB 		bl	tmr_set_count
 158:../main.c     **** 	tmr_update(TIMER0);
 3216              		.loc 1 158 0
 3217 0404 0000A0E3 		mov	r0, #0
 3218 0408 FEFFFFEB 		bl	tmr_update
 159:../main.c     **** 
 160:../main.c     **** 	if (RL.moving)
 3219              		.loc 1 160 0
 3220 040c A4309FE5 		ldr	r3, .L28
 3221 0410 003093E5 		ldr	r3, [r3, #0]
 3222 0414 000053E3 		cmp	r3, #0
 3223 0418 0100000A 		beq	.L27
 161:../main.c     **** 		tmr_start(TIMER0);
 3224              		.loc 1 161 0
 3225 041c 0000A0E3 		mov	r0, #0
 3226 0420 FEFFFFEB 		bl	tmr_start
 3227              	.L27:
 162:../main.c     **** 
 163:../main.c     **** 	/***************************/
 164:../main.c     **** 
 165:../main.c     **** 	// Registramos las ISRs
 166:../main.c     **** 	pISR_TIMER0   = (unsigned) timer_ISR;
 3228              		.loc 1 166 0
 3229 0424 94309FE5 		ldr	r3, .L28+8
 3230 0428 94209FE5 		ldr	r2, .L28+12
 3231 042c 002083E5 		str	r2, [r3, #0]
 167:../main.c     **** 	pISR_EINT4567 = (unsigned) button_ISR;
 3232              		.loc 1 167 0
 3233 0430 90309FE5 		ldr	r3, .L28+16
 3234 0434 90209FE5 		ldr	r2, .L28+20
 3235 0438 002083E5 		str	r2, [r3, #0]
 168:../main.c     **** 	pISR_EINT1    = (unsigned) keyboard_ISR;
 3236              		.loc 1 168 0
 3237 043c 8C309FE5 		ldr	r3, .L28+24
 3238 0440 8C209FE5 		ldr	r2, .L28+28
 3239 0444 002083E5 		str	r2, [r3, #0]
 169:../main.c     **** 
 170:../main.c     **** 	/* Configuración del controlador de interrupciones
 171:../main.c     **** 	 * Habilitamos la línea IRQ, en modo vectorizado 
 172:../main.c     **** 	 * Configuramos el timer 0 en modo IRQ y habilitamos esta línea
 173:../main.c     **** 	 * Configuramos la línea EINT4567 en modo IRQ y la habilitamos
 174:../main.c     **** 	 * Configuramos la línea EINT1 en modo IRQ y la habilitamos
 175:../main.c     **** 	 */
 176:../main.c     **** 	ic_init();
 3240              		.loc 1 176 0
 3241 0448 FEFFFFEB 		bl	ic_init
 177:../main.c     **** 
 178:../main.c     **** 	ic_conf_irq(ENABLE, VEC); 		//		habilitar la línea IRQ en modo vectorizado
 3242              		.loc 1 178 0
 3243 044c 0100A0E3 		mov	r0, #1
 3244 0450 0010A0E3 		mov	r1, #0
 3245 0454 FEFFFFEB 		bl	ic_conf_irq
 179:../main.c     **** 	ic_conf_fiq(DISABLE); 			//		deshabilitar la línea FIQ
 3246              		.loc 1 179 0
 3247 0458 0000A0E3 		mov	r0, #0
 3248 045c FEFFFFEB 		bl	ic_conf_fiq
 180:../main.c     **** 	ic_conf_line(INT_TIMER0, IRQ); 	//		configurar la línea INT_TIMER0 en modo IRQ
 3249              		.loc 1 180 0
 3250 0460 0D00A0E3 		mov	r0, #13
 3251 0464 0010A0E3 		mov	r1, #0
 3252 0468 FEFFFFEB 		bl	ic_conf_line
 181:../main.c     **** 	ic_conf_line(INT_EINT4567, IRQ);//		configurar la línea INT_EINT4567 en modo IRQ
 3253              		.loc 1 181 0
 3254 046c 1500A0E3 		mov	r0, #21
 3255 0470 0010A0E3 		mov	r1, #0
 3256 0474 FEFFFFEB 		bl	ic_conf_line
 182:../main.c     **** 	ic_conf_line(INT_EINT1, IRQ); 	//		configurar la línea INT_EINT1 en modo IRQ
 3257              		.loc 1 182 0
 3258 0478 1800A0E3 		mov	r0, #24
 3259 047c 0010A0E3 		mov	r1, #0
 3260 0480 FEFFFFEB 		bl	ic_conf_line
 183:../main.c     **** 	ic_enable(INT_TIMER0); 			//		habilitar la línea INT_TIMER0
 3261              		.loc 1 183 0
 3262 0484 0D00A0E3 		mov	r0, #13
 3263 0488 FEFFFFEB 		bl	ic_enable
 184:../main.c     **** 	ic_enable(INT_EINT4567); 		//		habilitar la línea INT_EINT4567
 3264              		.loc 1 184 0
 3265 048c 1500A0E3 		mov	r0, #21
 3266 0490 FEFFFFEB 		bl	ic_enable
 185:../main.c     **** 	ic_enable(INT_EINT1); 			//		habilitar la línea INT_EINT1
 3267              		.loc 1 185 0
 3268 0494 1800A0E3 		mov	r0, #24
 3269 0498 FEFFFFEB 		bl	ic_enable
 186:../main.c     **** 
 187:../main.c     **** 	/***************************************************/
 188:../main.c     **** 
 189:../main.c     **** 	Delay(0);
 3270              		.loc 1 189 0
 3271 049c 0000A0E3 		mov	r0, #0
 3272 04a0 FEFFFFEB 		bl	Delay
 190:../main.c     **** 	return 0;
 3273              		.loc 1 190 0
 3274 04a4 0030A0E3 		mov	r3, #0
 191:../main.c     **** }
 3275              		.loc 1 191 0
 3276 04a8 0300A0E1 		mov	r0, r3
 3277 04ac 0CD04BE2 		sub	sp, fp, #12
 3278 04b0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3279 04b4 1EFF2FE1 		bx	lr
 3280              	.L29:
 3281              		.align	2
 3282              	.L28:
 3283 04b8 00000000 		.word	RL
 3284 04bc 24F40000 		.word	62500
 3285 04c0 54FF7F0C 		.word	209715028
 3286 04c4 00000000 		.word	timer_ISR
 3287 04c8 74FF7F0C 		.word	209715060
 3288 04cc 00000000 		.word	button_ISR
 3289 04d0 80FF7F0C 		.word	209715072
 3290 04d4 00000000 		.word	keyboard_ISR
 3291              		.cfi_endproc
 3292              	.LFE3:
 3294              		.align	2
 3295              		.global	loop
 3297              	loop:
 3298              	.LFB4:
 192:../main.c     **** 
 193:../main.c     **** int loop(void)
 194:../main.c     **** {
 3299              		.loc 1 194 0
 3300              		.cfi_startproc
 3301              		@ Function supports interworking.
 3302              		@ args = 0, pretend = 0, frame = 0
 3303              		@ frame_needed = 1, uses_anonymous_args = 0
 3304 04d8 0DC0A0E1 		mov	ip, sp
 3305              	.LCFI8:
 3306              		.cfi_def_cfa_register 12
 3307 04dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3308 04e0 04B04CE2 		sub	fp, ip, #4
 3309              		.cfi_offset 14, -8
 3310              		.cfi_offset 13, -12
 3311              		.cfi_offset 11, -16
 3312              	.LCFI9:
 3313              		.cfi_def_cfa 11, 4
 195:../main.c     **** 	return 0;
 3314              		.loc 1 195 0
 3315 04e4 0030A0E3 		mov	r3, #0
 196:../main.c     **** }
 3316              		.loc 1 196 0
 3317 04e8 0300A0E1 		mov	r0, r3
 3318 04ec 0CD04BE2 		sub	sp, fp, #12
 3319 04f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3320 04f4 1EFF2FE1 		bx	lr
 3321              		.cfi_endproc
 3322              	.LFE4:
 3324              		.align	2
 3325              		.global	main
 3327              	main:
 3328              	.LFB5:
 197:../main.c     **** 
 198:../main.c     **** 
 199:../main.c     **** int main(void)
 200:../main.c     **** {
 3329              		.loc 1 200 0
 3330              		.cfi_startproc
 3331              		@ Function supports interworking.
 3332              		@ args = 0, pretend = 0, frame = 0
 3333              		@ frame_needed = 1, uses_anonymous_args = 0
 3334 04f8 0DC0A0E1 		mov	ip, sp
 3335              	.LCFI10:
 3336              		.cfi_def_cfa_register 12
 3337 04fc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3338 0500 04B04CE2 		sub	fp, ip, #4
 3339              		.cfi_offset 14, -8
 3340              		.cfi_offset 13, -12
 3341              		.cfi_offset 11, -16
 3342              	.LCFI11:
 3343              		.cfi_def_cfa 11, 4
 201:../main.c     **** 	setup();
 3344              		.loc 1 201 0
 3345 0504 FEFFFFEB 		bl	setup
 3346              	.L32:
 202:../main.c     **** 
 203:../main.c     **** 	while (1) {
 204:../main.c     **** 		loop();
 3347              		.loc 1 204 0 discriminator 1
 3348 0508 FEFFFFEB 		bl	loop
 205:../main.c     **** 	}
 3349              		.loc 1 205 0 discriminator 1
 3350 050c FDFFFFEA 		b	.L32
 3351              		.cfi_endproc
 3352              	.LFE5:
 3354              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2760   .data:00000000 $d
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2763   .data:00000000 RL
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2769   .text:00000000 $a
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2772   .text:00000000 timer_ISR
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2848   .text:000000bc $d
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2854   .bss:00000000 $d
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2855   .bss:00000000 cont
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2858   .text:000000c4 $a
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2861   .text:000000c4 button_ISR
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2968   .text:000001c0 $d
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2974   .text:000001cc $a
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:2977   .text:000001cc keyboard_ISR
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:3019   .text:00000214 $d
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:3025   .text:00000224 $a
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:3127   .text:00000330 $d
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:3134   .text:00000340 $a
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:3137   .text:00000340 setup
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:3283   .text:000004b8 $d
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:3294   .text:000004d8 $a
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:3297   .text:000004d8 loop
C:\Users\Celia\AppData\Local\Temp\cc35nsgs.s:3327   .text:000004f8 main
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
D8Led_segment
ic_cleanflag
led1_off
led2_off
led1_switch
led2_switch
tmr_start
tmr_stop
Delay
kb_scan
D8Led_digit
tmr_set_prescaler
tmr_set_divider
tmr_set_count
tmr_update
leds_init
D8Led_init
portG_conf
portG_eint_trig
portG_conf_pup
tmr_set_mode
ic_init
ic_conf_irq
ic_conf_fiq
ic_conf_line
ic_enable
